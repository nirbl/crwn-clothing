import React from 'react';
import { Route } from 'react-router-dom';

import { connect } from 'react-redux';

import CollectionsOverview from '../../components/collections-overview/collections-overview.component';
import CollectionPage from '../collection/collection.component';

import {
  firestore,
  convertCollectionsSnapshotToMap,
} from '../../firebase/firebase.utils.js';

import { updateCollections } from '../../redux/shop/shop.actions';

import WithSpinner from '../../components/with-spinner/with-spinner.component';

const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);
const CollectionPageWithSpinner = WithSpinner(CollectionPage);

class ShopPage extends React.Component {
  /* constructor(){
    super()

    this.state = {
      loading: true
    }
  } */
  state = {
    loading: true,
  };
  // Note ! instead of implement with constructor for the "loadind we will write:"
  //    => React will know if we in a class component and we write
  //      a state property like so at the top of our component declaration -
  //      that we probably are just invoking state
  //      => so it will under the hood - invokes the "super" for us so that we can
  //      actually leverage the state value
  unsubscribeFromSnapshot = null;

  componentDidMount() {
    const { updateCollections } = this.props;
    const collectionRef = firestore.collection('collections');

    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(
      async (snapshot) => {
        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);
        updateCollections(collectionsMap);
        //console.log(collectionsMap);
        //console.log(snapshot);

        // Note !! now when we have our state (above), we are just going to make
        //    sure that after our update collections is called - we'll just call
        //    this, "this.state" where loading equals false
        this.setState({ loading: false });
      }
    );
  }
  render() {
    const { match } = this.props;
    const { loading } = this.state;
    return (
      <div className='shop-page'>
        {/* <Route exact path={`${match.path}`} component={CollectionsOverview} /> */}
        <Route
          exact
          path={`${match.path}`}
          render={(props) => (
            <CollectionsOverviewWithSpinner isLoading={loading} {...props} />
          )}
        />
        {/* <Route
          path={`${match.path}/:collectionId`}
          component={CollectionPage}
        /> */}
        <Route
          path={`${match.path}/:collectionId`}
          render={(props) => (
            <CollectionPageWithSpinner isLoading={loading} {...props} />
          )}
        />
      </div>
    );
  }
}

/* const mapStateToProps = createStructuredSelector({
  collections: selectCollections,
}); */

const mapDispatchToProps = (dispatch) => ({
  updateCollections: (collectionsMap) =>
    dispatch(updateCollections(collectionsMap)),
});

//export default connect(mapStateToProps)(ShopPage);
export default connect(null, mapDispatchToProps)(ShopPage);
